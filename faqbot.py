# -*- coding: utf-8 -*-

import os
import logging
import logging.config

import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from models import User
from db_manager import DB_manager
from analyzer import analyst

# Settings 
if not os.path.exists('logs'):os.makedirs('logs')
logging.config.fileConfig(fname = 'mylogger.conf', disable_existing_loggers=False)
log = logging.getLogger(__name__)

load_dotenv()
bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot)
loop = asyncio.get_event_loop()
dbM = DB_manager()
dbM.create_table(User)

# 1. –ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    '''–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º - –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É, –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞'''
    try:
        dbM.add_record(User, message)
        dbM.session.commit()
    except Exception as ex:
        log.error(ex)
        dbM.session.rollback()
    inline_btn_1 = InlineKeyboardButton('üá¨üáß English', callback_data='English')
    inline_btn_2 = InlineKeyboardButton('üá©üá™ German', callback_data='German')
    inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)
    greeting = "Hello!\nWelcome to the CityStore FAQ_Bot.\nChoose the language, please."
    await bot.send_message(message.chat.id, greeting, reply_markup=inline_kb1)

#2. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ - –≤—ã–≤–µ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query_handler(lambda c: c.data == 'English')
async def process_callback_button1(callback_query: types.CallbackQuery):
    dbM.update_user_lang(callback_query.from_user.id,'English')
    log.info(dbM.get_user_from_id(callback_query.from_user.id))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,"All right, let's continue. What is your question?")

@dp.callback_query_handler(lambda c: c.data == 'German')
async def process_callback_button2(callback_query: types.CallbackQuery):
    dbM.update_user_lang(callback_query.from_user.id,'German')
    log.info(dbM.get_user_from_id(callback_query.from_user.id))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'Okay, lass uns weitermachen. Welche Frage haben Sie?')

@dp.message_handler(commands=['lang'])
async def change_language(message: types.Message):
    '''–ú–µ—Ç–æ–¥, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞'''
    inline_btn_1 = InlineKeyboardButton('üá¨üáß English', callback_data='English')
    inline_btn_2 = InlineKeyboardButton('üá©üá™ German', callback_data='German')
    inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)
    await bot.send_message(message.chat.id,"Choose language:", reply_markup=inline_kb1)

@dp.message_handler()
async def get_question(message: types.Message):
    '''–ù–∞—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ —É—Ç–æ—á–Ω—è–µ—Ç –ø–æ–º–æ–≥–ª–æ –ª–∏ —Ä–µ—à–µ–Ω–∏–µ'''
    current_user = dbM.get_user_from_id(message.chat.id)
    if current_user.lang == 'English':
        ans = analyst.classify_question_morphy(message, current_user.lang)
        await bot.send_message(message.chat.id, ans)
        inline_btn_1 = InlineKeyboardButton('Yes', callback_data='Yes')
        inline_btn_2 = InlineKeyboardButton('No', callback_data='No')
        inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)
        await bot.send_message(message.chat.id,"Have we resolved your problem?", reply_markup=inline_kb1)
    elif current_user.lang == 'German':
        ans = analyst.classify_question_morphy(message, current_user.lang)
        await bot.send_message(message.chat.id, ans)
        inline_btn_1 = InlineKeyboardButton('Ja', callback_data='Ja')
        inline_btn_2 = InlineKeyboardButton('Nein', callback_data='Nein')
        inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)
        await bot.send_message(message.chat.id,"Haben wir Ihr Problem gel√∂st?", reply_markup=inline_kb1)

@dp.callback_query_handler(lambda c: c.data == 'Yes')
async def process_callback_yes(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'Thank you for your request. We will be glad to see you soon.')

@dp.callback_query_handler(lambda c: c.data == 'No')
async def process_callback_no(callback_query: types.CallbackQuery):
    '''–ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'''
    form_yn = InlineKeyboardMarkup().add(
        InlineKeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å', callback_data='en_form_yes'),
        InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='en_form_no')) # –µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'Send you request to email support@citystore.world. We‚Äôll solve your problem.')
    await bot.send_message(callback_query.from_user.id, '–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –æ—Ç—Å—é–¥–∞? –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É!', reply_markup=form_yn)  

@dp.callback_query_handler(lambda c: c.data == 'Ja')
async def process_callback_yes(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'Danke f√ºr ihre Anfrage. Wir freuen uns, Sie in naher Zukunft zu sehen.')

@dp.callback_query_handler(lambda c: c.data == 'Nein')
async def process_callback_no(callback_query: types.CallbackQuery):
    '''–ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º'''
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'Senden Sie Ihre Anfrage an support@citystore.world. Wir werden Ihr Problem l√∂sen.')

@dp.callback_query_handler(lambda c: c.data == 'en_form_yes')
async def process_callback_no(callback_query: types.CallbackQuery):
    '''–ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'''
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,"–†–∞–±–æ—Ç–∞–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä")


if __name__ == '__main__':
    executor.start_polling(dp, loop=loop, skip_updates=True)
